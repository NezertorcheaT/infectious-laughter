using System;

namespace Entity.States
{
    /// <summary>
    /// это интерфейс для состояния<br />
    /// он позволяет использовать разные параметры для одинаковых стейтов<br />
    /// при его реализации обязательно создать класс, наследованый от <c>Properties</c>, который [<c>Serializable</c>], это ОБЯЗАТЕЛЬНО<br />
    /// пример реализации вы найдёте в <c>WaitState</c><br /> <br />
    /// ещё типа должно быть поле типа, о котором говорилось выше, ОБЯЗАТЕЛЬНО с аттрибутом [<c>StateEdit</c>]<br />
    /// эта кароч типа аргуметы дерева,<br />
    /// если стейт не <c>IEditableState</c>, то оно будет <code>null</code>,<br />
    /// если же стейт реализует <c>IEditableState</c>, то там будет объект спец типа,<br />
    /// можно будет получить собственные настройки апкастом к спецтипу
    /// </summary>
    public interface IEditableState
    {
        /// <summary>
        /// этот метод используется деревом для получения типа класса, наследованого от <c>Properties</c>, о котором говорилось ранее
        /// </summary>
        /// <returns>тип класса, наследованого от Properties, о котором говорилось ранее</returns>
        Type GetTypeOfEdit();
    }
}